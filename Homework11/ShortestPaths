#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <climits>
#include <queue>
using namespace std;

long long N, M, mod = 1000000007;
const long TEMP = 1000000;
vector<pair<long long, long long>> adj[TEMP];
long long dist[TEMP], pathsCount[TEMP];


auto compare = [](pair<long long, long long> left, pair<long long, long long> right) {
    return ((left.second) > (right.second));
};

void dijkstra(long long start){
    for (long long i = 1; i <= N; i++){
        dist[i] = LLONG_MAX;
    }
    dist[start] = 0;
    
    for (long long i = 2; i <= N; i++){
        pathsCount[i] = 0;
    }
     
    priority_queue<pair<long long, long long>, std::vector<pair<long long, long long>>, decltype(compare)> pq(compare);
    pq.push({ start, 0 });
    
    while (!pq.empty()){
        pathsCount[start] = 1;
        long long v = pq.top().first;
        long long vPrice = pq.top().second;
        pq.pop();

       
            for (pair<long long, long long> neighbour : adj[v]){

                long long w = neighbour.first;
                long long price = neighbour.second;

                if (vPrice + price == dist[w]){
                    pathsCount[w] += (pathsCount[v] % mod);
                    pathsCount[w] %= mod;
                }
                if (dist[v] + price < dist[w]){
                    dist[w] = dist[v] + price;
                    pathsCount[w] = pathsCount[v] % mod;
                    pq.push({ w, dist[w] });
                }
            }
        
    }
}
int main() {
    ios::sync_with_stdio(false);
    cin.tie(0);
    cin >> N >> M;
    
    for (long long i = 0; i < M; i++){
        long long x, y, price;
        cin >> x >> y >> price;
        adj[x].push_back({ y,price });
    }
    
    dijkstra(1);

    if (pathsCount[N] != 0){
        std::cout << dist[N] << " " << pathsCount[N];
    }else {
        std::cout << -1 << " " << 0;
    }
    return 0;
}
