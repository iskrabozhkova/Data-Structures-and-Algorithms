#include <iostream>
#include <list>
#include <queue>
#include <limits>
#include <algorithm>


class Graph {
    int V;
    std::list<std::pair<int, int> >* adjList;

public:
    Graph(int V);
    void addEdge(int u, int v, int w);
    void shortestPath(int s);
};

Graph::Graph(int V) {
    this->V = V;
    adjList = new std::list<std::pair<int, int>>[V];
}

void Graph::addEdge(int u, int v, int w) {
    adjList[u].push_back({ v, w });
    adjList[v].push_back({ u, w });
}


void Graph::shortestPath(int src) {
    std::priority_queue<std::pair<int, int>, std::vector <std::pair<int, int>>, std::greater<std::pair<int, int>> > priorityQueue;
    std::vector<int> distance(V, std::numeric_limits<int>().max());

    priorityQueue.push({ 0, src });
    distance[src] = 0;

    while (!priorityQueue.empty()) {
        int u = priorityQueue.top().second;
        priorityQueue.pop();

        std::list<std::pair<int, int> >::iterator i;
        for (i = adjList[u].begin(); i != adjList[u].end(); ++i) {
            int v = (*i).first;
            int weight = (*i).second;
            if (distance[v] > distance[u] + weight) {
                distance[v] = distance[u] + weight;
                priorityQueue.push({ distance[v], v });
            }
        }
    }
    if (distance[V - 1] == std::numeric_limits<int>().max()) {
        std::cout << -1;
    }
    else {
        std::cout << distance[V - 1];
    }
}

int main() {
    int V;
    std::cin >> V;
    Graph graph(V);

    int safeCount, riskCount;
    std::cin >> safeCount >> riskCount;
    int first, second;
    std::pair<int, int> safePair, riskPair;

    for (int i = 0; i < safeCount; i++) {
        std::cin >> first >> second;
        graph.addEdge(first, second, 0);
    }
    for (int i = 0; i < riskCount; i++) {
        std::cin >> first >> second;
        graph.addEdge(first, second, 1);
    }
     graph.shortestPath(0);


    return 0;
}
