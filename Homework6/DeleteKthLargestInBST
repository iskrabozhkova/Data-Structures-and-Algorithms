#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

struct Node{
    Node* left;
    Node* right;
    int value;
    
    Node(int value){
        this->value = value;
        this->left = NULL;
        this->right = NULL;
    }
};

class BST{
private:
    Node* root;
public:
    Node* insert(Node* curNode, int value) {
        if (curNode == NULL){
            return new Node(value);
        }
        if (curNode->value < value){
            curNode->right = insert(curNode->right, value);
        }
        else{
            curNode->left = insert(curNode->left, value);
        }
        return curNode;
    }
Node* findMax(Node* root){
    if (root->right != NULL){
        return findMax(root->right);
    }
    return root;
}
Node* deleteNode(Node* root, int k) {
        if (root == NULL){
            return root;
        }
        if (root->value > k) {
            root->left = deleteNode(root->left, k);
            return root;
        }else if (root->value < k) {
            root->right = deleteNode(root->right, k);
            return root;
        }
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }else{
            Node* tempParent = root;
            Node* temp = root->right;
            
            while (temp->left != NULL) {
                tempParent = temp;
                temp = temp->left;
            }
            if (tempParent != root){
                tempParent->left = temp->right;
            }else{
                tempParent->right = temp->right;
            }
            root->value = temp->value;
            delete temp;
            return root;
        }
    }

void levelOrder(Node* root){
    if (root == NULL) return;
    std::queue<Node*> q;

    Node* curr;
    q.push(root);
    q.push(NULL);

    while (q.size() > 1){
        curr = q.front();
        q.pop();

        if (curr == NULL){
            q.push(NULL);
        }else {
            if (curr->left)
                q.push(curr->left); 
            if (curr->right)
                q.push(curr->right);

            std::cout << curr->value << " ";
        }
    }
}
};
void merge(int* originalArray, int* mergeArray, int start, int mid, int end) {
    int left = start;
    int right = mid + 1;

    for (int i = start; i <= end; i++) {
        if (left <= mid && (right > end || originalArray[left] <= originalArray[right])) {
            mergeArray[i] = originalArray[left];
            left++;
        }
        else {
            mergeArray[i] = originalArray[right];
            right++;
        }
    }

    for (int i = start; i <= end; i++) {
        originalArray[i] = mergeArray[i];
    }
}

void _mergeSort(int* originalArray, int* mergeArray, int start, int end) {
    if (start < end) {
        int mid = (start + end) / 2;
        _mergeSort(originalArray, mergeArray, start, mid);
        _mergeSort(originalArray, mergeArray, mid + 1, end);
        merge(originalArray, mergeArray, start, mid, end);
    }
}

void mergeSort(int* array, int length) {
    int* mergeArray = new int[length];
    _mergeSort(array, mergeArray, 0, length - 1);
    delete[] mergeArray;
}

int main() { 
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);
    int n, k;
    std::cin >> n >> k;
    BST tree;
    Node* root = NULL;
    int array[100000];
    
    for (int i = 0; i < n; i++) {
        int num;
        std::cin >> num;
        root = tree.insert(root, num);
        array[i] = num;
    }
    mergeSort(array, n);
    tree.deleteNode(root, array[n-k]);
    tree.levelOrder(root);
    return 0;
}
