#include <cstdio>
#include <vector>
#include <queue>
#include <climits>
#include <iostream>

class Graph {
	std::vector<std::vector<std::pair<int, int>>> adj;
	//std::vector<bool> visited;
	std::vector<int> dist;
	int v;

public:
	Graph(int v) : v(v) {
		adj.assign(v + 1, std::vector<std::pair<int, int>>());
		dist.assign(v + 1, INT_MAX);
	}

	void insert(std::pair<int, int> v1, std::pair<int, int> v2) {
		adj[v1.second].push_back(v2);
		adj[v2.second].push_back(v1);
	}

	void djiikstra(int start) {
		//visited.assign(v + 1, 0);
		std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;
		pq.push({ 0, start });
		dist[start] = 0;

		while (!pq.empty()) {
			int v = pq.top().second;
			pq.pop();
			//if (!visited[v]) {
			//	visited[v] = true;
				for (auto neighbour : adj[v]) {
					//if (!visited[neighbour.second]) {
					int price = neighbour.first;
					int w = neighbour.second;
						if (dist[v] + price < dist[w]) {
							dist[w] = dist[v] + price;
							pq.push({ dist[w], w});
						}
					//}
				}
			//}
		}
		for (int i = 1; i < dist.size(); ++i) {
			if (i != start) {
				if (dist[i] == INT_MAX) {
					std::cout << -1 << ' ';
				}
				else {
					std::cout << dist[i] << ' ';
				}
			}
		}
	}
};


int main() {
	int n, m;
	std::cin >> n >> m;
	int x, y, price;

	Graph graph(n);

	for (int i = 0; i < m; ++i) {
		std::cin >> x >> y >> price;
		graph.insert({ price, x }, { price, y });
	}

	int number;
	std::cin >> number;

	graph.djiikstra(number);
}
