#include <iostream>
#include <queue>
#include <stack>
#include <vector>
using namespace std;
 
const int N = 1000;
 
int adjM[N][N], dist[N][N];
vector<int> adjL[N];
int n, m;
bool used1[N], used2[N];
 
void dfs(int v) {
    used1[v] = 1;
    ///cout<<v<<endl;
    /*
    for(auto x: adjL[v]) {
        if(!used1[x]) {
            dfs(x);
        }
    }
*/
 
    for(int i=0;i<n;++i) {
        if(adjM[v][i] == 1 && !used1[i]) {
            dfs(i);
        }
    }
 
}
 
void bfs(int v) {
    queue<int> q;
    used2[v] = 1;
    q.push(v);
    dist[v][v] = 0;
    while(!q.empty()) {
        int curVertex = q.front();
        ///cout<<curVertex<<endl;
        for(auto neighbour: adjL[curVertex]) {
            if(!used2[neighbour]) {
                q.push(neighbour);
                dist[v][neighbour] = dist[v][curVertex] + 1;
                used2[neighbour] = 1;
            }
        }
 
        /*for(int i=0;i<n;++i) {
            if(adjM[curVertex][i] && !used2[i]) {
                q.push(i);
                used2[i] = 1;
            }
        }*/
        q.pop();
    }
}
 
int main() {
    int x, y;
    cin>>n>>m;
    for(int i=0;i<m;++i) {
        cin>>x>>y;
 
        adjM[x][y] = 1;
        adjM[y][x] = 1;             ///undirected
 
        adjL[x].push_back(y);
        adjL[y].push_back(x);       ///undirected
    }
 
    bfs(0);
    int components = 0;
    for(int i=0;i<n;++i) {
        if(!used1[i]) {
            dfs(i);
            components++;
        }
    }
    cout<<dist[0][1]<<endl;
}
/**
6 7
0 4
1 2
1 3
1 4
2 3
2 4
3 4
**/
