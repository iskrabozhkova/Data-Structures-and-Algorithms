#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


struct Node{
    int key;
    Node* left;
    Node* right;
    int height;
};

int height(Node* node){
    if (node == NULL)
        return 0;
    return node->height;
}

int max(int a, int b){
    if (a > b) {
        return a;
    }else {
        return b;
    }
}

Node* newNode(int key){
    Node* node = new Node();
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1; 
    return(node);
} 
Node* rightRotation(Node* node){
    Node* temp = node->left;
    Node* temp2 = temp->right;
 
    temp->right = node;
    node->left = temp2;

    node->height = max(height(node->left),
        height(node->right)) + 1;
    temp->height = max(height(temp->left),
        height(temp->right)) + 1;

    return temp;
}

Node* leftRotation(Node* node){
    Node* temp = node->right;
    Node* temp2 = temp->left;
 
    temp->left = node;
    node->right = temp2;
 
    node->height = max(height(node->left),
        height(node->right)) + 1;
    temp->height = max(height(temp->left),
        height(temp->right)) + 1;

    return temp;
}

int getBalance(Node* node){
    if (node == NULL)
        return 0;
    return height(node->left) - height(node->right);
}

Node* insert(Node* node, int key){
    if (node == NULL)
        return(newNode(key));

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node;

    node->height = 1 + max(height(node->left),
        height(node->right));

    int balance = getBalance(node);

    if (balance > 1 && key < node->left->key)
        return rightRotation(node);

    if (balance < -1 && key > node->right->key)
        return leftRotation(node);

    if (balance > 1 && key > node->left->key){
        node->left = leftRotation(node->left);
        return rightRotation(node);
    }
 
    if (balance < -1 && key < node->right->key){
        node->right = rightRotation(node->right);
        return leftRotation(node);
    }
    return node;
}

Node* minValue(Node* node){
    Node* temp = node;
    while (temp->left != NULL)
        temp = temp->left;

    return temp;
}

Node* deleteNode(Node* root, int key){ 
    if (root == NULL)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key); 
    else{
        if ((root->left == NULL) ||(root->right == NULL)){
            Node* temp = root->left ? root->left : root->right;

            if (temp == NULL){
                temp = root;
                root = NULL;
            }else 
                *root = *temp;              
            free(temp);
        }
        else{
            Node* temp = minValue(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }
 
    if (root == NULL)
        return root;

    root->height = 1 + max(height(root->left),
        height(root->right));

    int balance = getBalance(root);

    if (balance > 1 && getBalance(root->left) >= 0)
        return rightRotation(root);

    if (balance > 1 && getBalance(root->left) < 0){
        root->left = leftRotation(root->left);
        return rightRotation(root);
    }
 
    if (balance < -1 && getBalance(root->right) <= 0)
        return leftRotation(root);
 
    if (balance < -1 && getBalance(root->right) > 0){
        root->right = rightRotation(root->right);
        return leftRotation(root);
    }
    return root;
}
void inorder(Node* node) {
    if (node) {
        inorder(node->left);
        std::cout << node->key << " ";
        inorder(node->right);
    }
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(NULL);
    std::cout.tie(NULL);
    
    int n;
    std::cin >> n;
    std::string word;
    Node* root = NULL;

    for (int i = 0; i < n; i++) {
        std::cin >> word;
        if (word == "add") {
            int number = 0;
            std::cin >> number;
            root = insert(root, number);
        }
        else if (word == "del") {
            int number = 0;
            std::cin >> number;
            root = deleteNode(root, number);
        }
        else if (word == "inorder") {
            inorder(root);
            std::cout << std::endl;
        }
    }
    return 0;
}
