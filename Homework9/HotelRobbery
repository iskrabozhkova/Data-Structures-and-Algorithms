#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>

int main(){
    int n;
    std::cin >> n;
    
    int counter = 0;
    std::unordered_map<int, int> mapKeys;
    int* array = new int[n - 1];
    
    for (int i = 0; i < n - 1; i++){
        int keyInRoom;
        std::cin >> keyInRoom;
    
        array[i] = keyInRoom;
    }
    
    mapKeys.insert({ array[0], 1 });
    
    for (int i = 0; i < n - 1; i++){
        int key;
        std::cin >> key;
    
        if (mapKeys.find(key) == mapKeys.end()){
            counter++;
    
            if (mapKeys.find(array[i + 1]) != mapKeys.end()) {
                mapKeys[array[i + 1]]++;
            }else {
                mapKeys.insert({ array[i + 1], 1 });
            }
        }
        else{
            if (mapKeys.find(key)->second > 1){
                mapKeys[key]--;
            }else{
                mapKeys.erase(key);
            }

            if (mapKeys.find(array[i + 1]) != mapKeys.end()) {
                mapKeys[array[i + 1]]++;
            }else {
                mapKeys.insert({ array[i + 1], 1 });
            }
        }
    }
    std::cout << counter;
    delete[] array;
    return 0;
}

